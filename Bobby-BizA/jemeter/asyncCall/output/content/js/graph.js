/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 23.0, "minX": 0.0, "maxY": 3251.0, "series": [{"data": [[0.0, 23.0], [0.1, 23.0], [0.2, 26.0], [0.3, 26.0], [0.4, 29.0], [0.5, 34.0], [0.6, 44.0], [0.7, 44.0], [0.8, 73.0], [0.9, 79.0], [1.0, 80.0], [1.1, 80.0], [1.2, 89.0], [1.3, 89.0], [1.4, 90.0], [1.5, 102.0], [1.6, 103.0], [1.7, 103.0], [1.8, 103.0], [1.9, 103.0], [2.0, 105.0], [2.1, 111.0], [2.2, 117.0], [2.3, 117.0], [2.4, 118.0], [2.5, 119.0], [2.6, 119.0], [2.7, 121.0], [2.8, 121.0], [2.9, 121.0], [3.0, 121.0], [3.1, 123.0], [3.2, 124.0], [3.3, 126.0], [3.4, 129.0], [3.5, 129.0], [3.6, 130.0], [3.7, 132.0], [3.8, 133.0], [3.9, 134.0], [4.0, 136.0], [4.1, 137.0], [4.2, 137.0], [4.3, 139.0], [4.4, 139.0], [4.5, 139.0], [4.6, 140.0], [4.7, 152.0], [4.8, 155.0], [4.9, 156.0], [5.0, 159.0], [5.1, 164.0], [5.2, 164.0], [5.3, 166.0], [5.4, 166.0], [5.5, 167.0], [5.6, 170.0], [5.7, 173.0], [5.8, 174.0], [5.9, 176.0], [6.0, 177.0], [6.1, 196.0], [6.2, 201.0], [6.3, 201.0], [6.4, 202.0], [6.5, 204.0], [6.6, 206.0], [6.7, 208.0], [6.8, 209.0], [6.9, 211.0], [7.0, 212.0], [7.1, 213.0], [7.2, 213.0], [7.3, 213.0], [7.4, 216.0], [7.5, 218.0], [7.6, 218.0], [7.7, 219.0], [7.8, 222.0], [7.9, 223.0], [8.0, 235.0], [8.1, 238.0], [8.2, 241.0], [8.3, 241.0], [8.4, 244.0], [8.5, 252.0], [8.6, 255.0], [8.7, 276.0], [8.8, 277.0], [8.9, 279.0], [9.0, 286.0], [9.1, 292.0], [9.2, 301.0], [9.3, 307.0], [9.4, 313.0], [9.5, 339.0], [9.6, 345.0], [9.7, 351.0], [9.8, 353.0], [9.9, 353.0], [10.0, 354.0], [10.1, 354.0], [10.2, 355.0], [10.3, 355.0], [10.4, 362.0], [10.5, 364.0], [10.6, 368.0], [10.7, 369.0], [10.8, 370.0], [10.9, 371.0], [11.0, 371.0], [11.1, 373.0], [11.2, 383.0], [11.3, 385.0], [11.4, 385.0], [11.5, 389.0], [11.6, 390.0], [11.7, 394.0], [11.8, 398.0], [11.9, 401.0], [12.0, 401.0], [12.1, 404.0], [12.2, 406.0], [12.3, 408.0], [12.4, 408.0], [12.5, 420.0], [12.6, 421.0], [12.7, 433.0], [12.8, 438.0], [12.9, 439.0], [13.0, 440.0], [13.1, 445.0], [13.2, 449.0], [13.3, 456.0], [13.4, 456.0], [13.5, 468.0], [13.6, 469.0], [13.7, 474.0], [13.8, 477.0], [13.9, 481.0], [14.0, 482.0], [14.1, 489.0], [14.2, 495.0], [14.3, 498.0], [14.4, 500.0], [14.5, 504.0], [14.6, 506.0], [14.7, 507.0], [14.8, 509.0], [14.9, 523.0], [15.0, 527.0], [15.1, 534.0], [15.2, 538.0], [15.3, 551.0], [15.4, 556.0], [15.5, 557.0], [15.6, 558.0], [15.7, 564.0], [15.8, 570.0], [15.9, 572.0], [16.0, 574.0], [16.1, 580.0], [16.2, 625.0], [16.3, 626.0], [16.4, 627.0], [16.5, 629.0], [16.6, 629.0], [16.7, 630.0], [16.8, 631.0], [16.9, 631.0], [17.0, 634.0], [17.1, 639.0], [17.2, 641.0], [17.3, 641.0], [17.4, 642.0], [17.5, 644.0], [17.6, 644.0], [17.7, 644.0], [17.8, 647.0], [17.9, 649.0], [18.0, 649.0], [18.1, 649.0], [18.2, 649.0], [18.3, 650.0], [18.4, 650.0], [18.5, 654.0], [18.6, 655.0], [18.7, 656.0], [18.8, 657.0], [18.9, 660.0], [19.0, 666.0], [19.1, 666.0], [19.2, 667.0], [19.3, 668.0], [19.4, 669.0], [19.5, 671.0], [19.6, 673.0], [19.7, 673.0], [19.8, 677.0], [19.9, 677.0], [20.0, 680.0], [20.1, 681.0], [20.2, 684.0], [20.3, 686.0], [20.4, 686.0], [20.5, 690.0], [20.6, 693.0], [20.7, 693.0], [20.8, 693.0], [20.9, 695.0], [21.0, 696.0], [21.1, 697.0], [21.2, 698.0], [21.3, 702.0], [21.4, 702.0], [21.5, 705.0], [21.6, 706.0], [21.7, 707.0], [21.8, 708.0], [21.9, 708.0], [22.0, 710.0], [22.1, 712.0], [22.2, 712.0], [22.3, 713.0], [22.4, 713.0], [22.5, 719.0], [22.6, 724.0], [22.7, 724.0], [22.8, 725.0], [22.9, 725.0], [23.0, 726.0], [23.1, 731.0], [23.2, 731.0], [23.3, 732.0], [23.4, 737.0], [23.5, 739.0], [23.6, 740.0], [23.7, 743.0], [23.8, 744.0], [23.9, 746.0], [24.0, 747.0], [24.1, 747.0], [24.2, 750.0], [24.3, 750.0], [24.4, 756.0], [24.5, 758.0], [24.6, 762.0], [24.7, 764.0], [24.8, 765.0], [24.9, 769.0], [25.0, 773.0], [25.1, 776.0], [25.2, 776.0], [25.3, 778.0], [25.4, 779.0], [25.5, 786.0], [25.6, 789.0], [25.7, 790.0], [25.8, 795.0], [25.9, 798.0], [26.0, 799.0], [26.1, 800.0], [26.2, 801.0], [26.3, 802.0], [26.4, 805.0], [26.5, 809.0], [26.6, 809.0], [26.7, 809.0], [26.8, 811.0], [26.9, 811.0], [27.0, 812.0], [27.1, 813.0], [27.2, 814.0], [27.3, 814.0], [27.4, 816.0], [27.5, 817.0], [27.6, 818.0], [27.7, 818.0], [27.8, 822.0], [27.9, 823.0], [28.0, 825.0], [28.1, 825.0], [28.2, 825.0], [28.3, 829.0], [28.4, 829.0], [28.5, 831.0], [28.6, 831.0], [28.7, 831.0], [28.8, 832.0], [28.9, 832.0], [29.0, 832.0], [29.1, 835.0], [29.2, 836.0], [29.3, 836.0], [29.4, 838.0], [29.5, 840.0], [29.6, 842.0], [29.7, 842.0], [29.8, 842.0], [29.9, 844.0], [30.0, 844.0], [30.1, 846.0], [30.2, 850.0], [30.3, 850.0], [30.4, 850.0], [30.5, 851.0], [30.6, 851.0], [30.7, 852.0], [30.8, 853.0], [30.9, 853.0], [31.0, 858.0], [31.1, 859.0], [31.2, 859.0], [31.3, 859.0], [31.4, 860.0], [31.5, 861.0], [31.6, 862.0], [31.7, 864.0], [31.8, 865.0], [31.9, 866.0], [32.0, 868.0], [32.1, 868.0], [32.2, 870.0], [32.3, 870.0], [32.4, 874.0], [32.5, 877.0], [32.6, 877.0], [32.7, 878.0], [32.8, 878.0], [32.9, 880.0], [33.0, 881.0], [33.1, 882.0], [33.2, 886.0], [33.3, 886.0], [33.4, 891.0], [33.5, 892.0], [33.6, 892.0], [33.7, 892.0], [33.8, 895.0], [33.9, 896.0], [34.0, 897.0], [34.1, 898.0], [34.2, 901.0], [34.3, 905.0], [34.4, 905.0], [34.5, 906.0], [34.6, 906.0], [34.7, 906.0], [34.8, 907.0], [34.9, 907.0], [35.0, 907.0], [35.1, 909.0], [35.2, 910.0], [35.3, 912.0], [35.4, 912.0], [35.5, 919.0], [35.6, 920.0], [35.7, 922.0], [35.8, 922.0], [35.9, 922.0], [36.0, 925.0], [36.1, 931.0], [36.2, 932.0], [36.3, 932.0], [36.4, 933.0], [36.5, 933.0], [36.6, 934.0], [36.7, 936.0], [36.8, 936.0], [36.9, 939.0], [37.0, 940.0], [37.1, 943.0], [37.2, 944.0], [37.3, 944.0], [37.4, 945.0], [37.5, 946.0], [37.6, 946.0], [37.7, 946.0], [37.8, 947.0], [37.9, 953.0], [38.0, 953.0], [38.1, 953.0], [38.2, 953.0], [38.3, 955.0], [38.4, 959.0], [38.5, 961.0], [38.6, 964.0], [38.7, 966.0], [38.8, 967.0], [38.9, 967.0], [39.0, 968.0], [39.1, 975.0], [39.2, 977.0], [39.3, 977.0], [39.4, 977.0], [39.5, 978.0], [39.6, 981.0], [39.7, 981.0], [39.8, 992.0], [39.9, 997.0], [40.0, 997.0], [40.1, 1003.0], [40.2, 1003.0], [40.3, 1004.0], [40.4, 1005.0], [40.5, 1006.0], [40.6, 1008.0], [40.7, 1011.0], [40.8, 1020.0], [40.9, 1021.0], [41.0, 1029.0], [41.1, 1042.0], [41.2, 1042.0], [41.3, 1056.0], [41.4, 1058.0], [41.5, 1061.0], [41.6, 1062.0], [41.7, 1064.0], [41.8, 1066.0], [41.9, 1067.0], [42.0, 1069.0], [42.1, 1072.0], [42.2, 1072.0], [42.3, 1075.0], [42.4, 1082.0], [42.5, 1083.0], [42.6, 1084.0], [42.7, 1089.0], [42.8, 1091.0], [42.9, 1092.0], [43.0, 1093.0], [43.1, 1095.0], [43.2, 1097.0], [43.3, 1101.0], [43.4, 1102.0], [43.5, 1105.0], [43.6, 1112.0], [43.7, 1114.0], [43.8, 1115.0], [43.9, 1116.0], [44.0, 1117.0], [44.1, 1117.0], [44.2, 1117.0], [44.3, 1118.0], [44.4, 1118.0], [44.5, 1120.0], [44.6, 1120.0], [44.7, 1121.0], [44.8, 1121.0], [44.9, 1122.0], [45.0, 1123.0], [45.1, 1123.0], [45.2, 1123.0], [45.3, 1124.0], [45.4, 1124.0], [45.5, 1126.0], [45.6, 1126.0], [45.7, 1127.0], [45.8, 1127.0], [45.9, 1127.0], [46.0, 1127.0], [46.1, 1127.0], [46.2, 1128.0], [46.3, 1129.0], [46.4, 1129.0], [46.5, 1129.0], [46.6, 1130.0], [46.7, 1131.0], [46.8, 1131.0], [46.9, 1131.0], [47.0, 1132.0], [47.1, 1132.0], [47.2, 1133.0], [47.3, 1133.0], [47.4, 1134.0], [47.5, 1134.0], [47.6, 1135.0], [47.7, 1135.0], [47.8, 1136.0], [47.9, 1136.0], [48.0, 1137.0], [48.1, 1138.0], [48.2, 1139.0], [48.3, 1139.0], [48.4, 1141.0], [48.5, 1141.0], [48.6, 1142.0], [48.7, 1142.0], [48.8, 1143.0], [48.9, 1144.0], [49.0, 1145.0], [49.1, 1145.0], [49.2, 1148.0], [49.3, 1149.0], [49.4, 1149.0], [49.5, 1150.0], [49.6, 1150.0], [49.7, 1150.0], [49.8, 1152.0], [49.9, 1152.0], [50.0, 1156.0], [50.1, 1158.0], [50.2, 1161.0], [50.3, 1161.0], [50.4, 1162.0], [50.5, 1163.0], [50.6, 1163.0], [50.7, 1166.0], [50.8, 1167.0], [50.9, 1169.0], [51.0, 1169.0], [51.1, 1176.0], [51.2, 1178.0], [51.3, 1181.0], [51.4, 1182.0], [51.5, 1182.0], [51.6, 1183.0], [51.7, 1183.0], [51.8, 1187.0], [51.9, 1189.0], [52.0, 1203.0], [52.1, 1206.0], [52.2, 1206.0], [52.3, 1207.0], [52.4, 1211.0], [52.5, 1212.0], [52.6, 1213.0], [52.7, 1214.0], [52.8, 1217.0], [52.9, 1221.0], [53.0, 1228.0], [53.1, 1235.0], [53.2, 1236.0], [53.3, 1236.0], [53.4, 1239.0], [53.5, 1248.0], [53.6, 1254.0], [53.7, 1256.0], [53.8, 1259.0], [53.9, 1259.0], [54.0, 1260.0], [54.1, 1264.0], [54.2, 1264.0], [54.3, 1265.0], [54.4, 1265.0], [54.5, 1274.0], [54.6, 1275.0], [54.7, 1275.0], [54.8, 1276.0], [54.9, 1277.0], [55.0, 1282.0], [55.1, 1283.0], [55.2, 1285.0], [55.3, 1285.0], [55.4, 1303.0], [55.5, 1305.0], [55.6, 1306.0], [55.7, 1306.0], [55.8, 1306.0], [55.9, 1307.0], [56.0, 1311.0], [56.1, 1311.0], [56.2, 1313.0], [56.3, 1313.0], [56.4, 1315.0], [56.5, 1315.0], [56.6, 1315.0], [56.7, 1316.0], [56.8, 1316.0], [56.9, 1321.0], [57.0, 1322.0], [57.1, 1323.0], [57.2, 1326.0], [57.3, 1326.0], [57.4, 1327.0], [57.5, 1327.0], [57.6, 1328.0], [57.7, 1332.0], [57.8, 1333.0], [57.9, 1333.0], [58.0, 1334.0], [58.1, 1334.0], [58.2, 1335.0], [58.3, 1339.0], [58.4, 1341.0], [58.5, 1342.0], [58.6, 1342.0], [58.7, 1343.0], [58.8, 1344.0], [58.9, 1344.0], [59.0, 1344.0], [59.1, 1345.0], [59.2, 1345.0], [59.3, 1349.0], [59.4, 1352.0], [59.5, 1354.0], [59.6, 1354.0], [59.7, 1354.0], [59.8, 1356.0], [59.9, 1356.0], [60.0, 1360.0], [60.1, 1363.0], [60.2, 1366.0], [60.3, 1368.0], [60.4, 1369.0], [60.5, 1370.0], [60.6, 1374.0], [60.7, 1374.0], [60.8, 1374.0], [60.9, 1382.0], [61.0, 1385.0], [61.1, 1387.0], [61.2, 1393.0], [61.3, 1395.0], [61.4, 1396.0], [61.5, 1398.0], [61.6, 1399.0], [61.7, 1399.0], [61.8, 1400.0], [61.9, 1405.0], [62.0, 1406.0], [62.1, 1406.0], [62.2, 1407.0], [62.3, 1408.0], [62.4, 1409.0], [62.5, 1412.0], [62.6, 1413.0], [62.7, 1414.0], [62.8, 1416.0], [62.9, 1424.0], [63.0, 1424.0], [63.1, 1424.0], [63.2, 1424.0], [63.3, 1426.0], [63.4, 1427.0], [63.5, 1427.0], [63.6, 1431.0], [63.7, 1432.0], [63.8, 1434.0], [63.9, 1434.0], [64.0, 1434.0], [64.1, 1436.0], [64.2, 1436.0], [64.3, 1439.0], [64.4, 1439.0], [64.5, 1441.0], [64.6, 1442.0], [64.7, 1444.0], [64.8, 1444.0], [64.9, 1445.0], [65.0, 1445.0], [65.1, 1447.0], [65.2, 1447.0], [65.3, 1447.0], [65.4, 1452.0], [65.5, 1454.0], [65.6, 1454.0], [65.7, 1457.0], [65.8, 1461.0], [65.9, 1461.0], [66.0, 1463.0], [66.1, 1476.0], [66.2, 1478.0], [66.3, 1478.0], [66.4, 1479.0], [66.5, 1486.0], [66.6, 1494.0], [66.7, 1495.0], [66.8, 1496.0], [66.9, 1496.0], [67.0, 1497.0], [67.1, 1498.0], [67.2, 1498.0], [67.3, 1499.0], [67.4, 1499.0], [67.5, 1500.0], [67.6, 1502.0], [67.7, 1502.0], [67.8, 1505.0], [67.9, 1508.0], [68.0, 1509.0], [68.1, 1513.0], [68.2, 1515.0], [68.3, 1516.0], [68.4, 1517.0], [68.5, 1518.0], [68.6, 1524.0], [68.7, 1525.0], [68.8, 1528.0], [68.9, 1531.0], [69.0, 1537.0], [69.1, 1545.0], [69.2, 1547.0], [69.3, 1550.0], [69.4, 1554.0], [69.5, 1556.0], [69.6, 1559.0], [69.7, 1560.0], [69.8, 1561.0], [69.9, 1562.0], [70.0, 1563.0], [70.1, 1563.0], [70.2, 1564.0], [70.3, 1568.0], [70.4, 1568.0], [70.5, 1569.0], [70.6, 1574.0], [70.7, 1580.0], [70.8, 1583.0], [70.9, 1583.0], [71.0, 1589.0], [71.1, 1592.0], [71.2, 1598.0], [71.3, 1602.0], [71.4, 1604.0], [71.5, 1604.0], [71.6, 1605.0], [71.7, 1606.0], [71.8, 1607.0], [71.9, 1607.0], [72.0, 1609.0], [72.1, 1609.0], [72.2, 1610.0], [72.3, 1610.0], [72.4, 1611.0], [72.5, 1611.0], [72.6, 1614.0], [72.7, 1614.0], [72.8, 1615.0], [72.9, 1615.0], [73.0, 1616.0], [73.1, 1616.0], [73.2, 1616.0], [73.3, 1623.0], [73.4, 1623.0], [73.5, 1624.0], [73.6, 1625.0], [73.7, 1625.0], [73.8, 1630.0], [73.9, 1633.0], [74.0, 1634.0], [74.1, 1634.0], [74.2, 1634.0], [74.3, 1636.0], [74.4, 1636.0], [74.5, 1636.0], [74.6, 1636.0], [74.7, 1637.0], [74.8, 1639.0], [74.9, 1641.0], [75.0, 1649.0], [75.1, 1652.0], [75.2, 1653.0], [75.3, 1656.0], [75.4, 1656.0], [75.5, 1661.0], [75.6, 1665.0], [75.7, 1677.0], [75.8, 1683.0], [75.9, 1699.0], [76.0, 1705.0], [76.1, 1712.0], [76.2, 1713.0], [76.3, 1715.0], [76.4, 1726.0], [76.5, 1735.0], [76.6, 1766.0], [76.7, 1781.0], [76.8, 1788.0], [76.9, 1796.0], [77.0, 1798.0], [77.1, 1811.0], [77.2, 1813.0], [77.3, 1814.0], [77.4, 1824.0], [77.5, 1836.0], [77.6, 1836.0], [77.7, 1837.0], [77.8, 1839.0], [77.9, 1843.0], [78.0, 1848.0], [78.1, 1849.0], [78.2, 1849.0], [78.3, 1851.0], [78.4, 1907.0], [78.5, 1927.0], [78.6, 1940.0], [78.7, 1947.0], [78.8, 1949.0], [78.9, 1951.0], [79.0, 1951.0], [79.1, 1955.0], [79.2, 1955.0], [79.3, 1956.0], [79.4, 1960.0], [79.5, 1963.0], [79.6, 1964.0], [79.7, 1964.0], [79.8, 1968.0], [79.9, 1969.0], [80.0, 1974.0], [80.1, 1974.0], [80.2, 1975.0], [80.3, 1978.0], [80.4, 1979.0], [80.5, 1984.0], [80.6, 1984.0], [80.7, 1984.0], [80.8, 1986.0], [80.9, 1987.0], [81.0, 1987.0], [81.1, 1988.0], [81.2, 1989.0], [81.3, 1990.0], [81.4, 1992.0], [81.5, 1993.0], [81.6, 1996.0], [81.7, 1998.0], [81.8, 1999.0], [81.9, 2000.0], [82.0, 2001.0], [82.1, 2003.0], [82.2, 2007.0], [82.3, 2007.0], [82.4, 2009.0], [82.5, 2011.0], [82.6, 2011.0], [82.7, 2012.0], [82.8, 2013.0], [82.9, 2013.0], [83.0, 2014.0], [83.1, 2015.0], [83.2, 2016.0], [83.3, 2017.0], [83.4, 2017.0], [83.5, 2019.0], [83.6, 2022.0], [83.7, 2024.0], [83.8, 2030.0], [83.9, 2031.0], [84.0, 2031.0], [84.1, 2031.0], [84.2, 2031.0], [84.3, 2035.0], [84.4, 2036.0], [84.5, 2037.0], [84.6, 2094.0], [84.7, 2109.0], [84.8, 2127.0], [84.9, 2136.0], [85.0, 2138.0], [85.1, 2139.0], [85.2, 2141.0], [85.3, 2141.0], [85.4, 2142.0], [85.5, 2152.0], [85.6, 2155.0], [85.7, 2155.0], [85.8, 2163.0], [85.9, 2164.0], [86.0, 2164.0], [86.1, 2168.0], [86.2, 2169.0], [86.3, 2171.0], [86.4, 2172.0], [86.5, 2180.0], [86.6, 2182.0], [86.7, 2184.0], [86.8, 2187.0], [86.9, 2188.0], [87.0, 2191.0], [87.1, 2191.0], [87.2, 2191.0], [87.3, 2195.0], [87.4, 2195.0], [87.5, 2196.0], [87.6, 2197.0], [87.7, 2199.0], [87.8, 2201.0], [87.9, 2202.0], [88.0, 2204.0], [88.1, 2206.0], [88.2, 2211.0], [88.3, 2211.0], [88.4, 2211.0], [88.5, 2213.0], [88.6, 2216.0], [88.7, 2218.0], [88.8, 2219.0], [88.9, 2220.0], [89.0, 2222.0], [89.1, 2223.0], [89.2, 2224.0], [89.3, 2224.0], [89.4, 2225.0], [89.5, 2225.0], [89.6, 2227.0], [89.7, 2228.0], [89.8, 2229.0], [89.9, 2238.0], [90.0, 2241.0], [90.1, 2260.0], [90.2, 2265.0], [90.3, 2266.0], [90.4, 2269.0], [90.5, 2269.0], [90.6, 2288.0], [90.7, 2292.0], [90.8, 2292.0], [90.9, 2330.0], [91.0, 2332.0], [91.1, 2336.0], [91.2, 2347.0], [91.3, 2355.0], [91.4, 2364.0], [91.5, 2366.0], [91.6, 2368.0], [91.7, 2377.0], [91.8, 2379.0], [91.9, 2385.0], [92.0, 2389.0], [92.1, 2395.0], [92.2, 2397.0], [92.3, 2401.0], [92.4, 2403.0], [92.5, 2404.0], [92.6, 2409.0], [92.7, 2409.0], [92.8, 2411.0], [92.9, 2412.0], [93.0, 2414.0], [93.1, 2419.0], [93.2, 2420.0], [93.3, 2420.0], [93.4, 2423.0], [93.5, 2425.0], [93.6, 2426.0], [93.7, 2433.0], [93.8, 2469.0], [93.9, 2476.0], [94.0, 2478.0], [94.1, 2480.0], [94.2, 2486.0], [94.3, 2520.0], [94.4, 2527.0], [94.5, 2532.0], [94.6, 2546.0], [94.7, 2565.0], [94.8, 2597.0], [94.9, 2598.0], [95.0, 2599.0], [95.1, 2602.0], [95.2, 2604.0], [95.3, 2606.0], [95.4, 2609.0], [95.5, 2612.0], [95.6, 2612.0], [95.7, 2619.0], [95.8, 2630.0], [95.9, 2631.0], [96.0, 2649.0], [96.1, 2658.0], [96.2, 2664.0], [96.3, 2673.0], [96.4, 2712.0], [96.5, 2714.0], [96.6, 2724.0], [96.7, 2728.0], [96.8, 2745.0], [96.9, 2757.0], [97.0, 2758.0], [97.1, 2763.0], [97.2, 2774.0], [97.3, 2779.0], [97.4, 2789.0], [97.5, 2790.0], [97.6, 2791.0], [97.7, 2792.0], [97.8, 2795.0], [97.9, 2806.0], [98.0, 2818.0], [98.1, 2833.0], [98.2, 2841.0], [98.3, 2853.0], [98.4, 2855.0], [98.5, 2857.0], [98.6, 2868.0], [98.7, 2899.0], [98.8, 2899.0], [98.9, 2905.0], [99.0, 2909.0], [99.1, 2965.0], [99.2, 2978.0], [99.3, 2982.0], [99.4, 2997.0], [99.5, 3015.0], [99.6, 3023.0], [99.7, 3030.0], [99.8, 3223.0], [99.9, 3251.0]], "isOverall": false, "label": "doBizA HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 87.0, "series": [{"data": [[0.0, 15.0], [600.0, 51.0], [700.0, 47.0], [800.0, 81.0], [900.0, 59.0], [1000.0, 32.0], [1100.0, 87.0], [1200.0, 34.0], [1300.0, 64.0], [1400.0, 57.0], [1500.0, 38.0], [100.0, 47.0], [1600.0, 47.0], [1700.0, 11.0], [1800.0, 14.0], [1900.0, 35.0], [2000.0, 28.0], [2100.0, 31.0], [2200.0, 31.0], [2300.0, 14.0], [2400.0, 20.0], [2500.0, 8.0], [2600.0, 13.0], [2700.0, 15.0], [2800.0, 10.0], [2900.0, 6.0], [3000.0, 3.0], [200.0, 30.0], [3200.0, 2.0], [300.0, 27.0], [400.0, 25.0], [500.0, 18.0]], "isOverall": false, "label": "doBizA HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 145.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 530.0, "series": [{"data": [[0.0, 145.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 530.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 325.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 410.98000000000013, "minX": 1.74289746E12, "maxY": 410.98000000000013, "series": [{"data": [[1.74289746E12, 410.98000000000013]], "isOverall": false, "label": "并发线程组", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74289746E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 74.0, "minX": 1.0, "maxY": 3251.0, "series": [{"data": [[2.0, 2673.0], [4.0, 2574.5], [5.0, 2868.0], [7.0, 2573.5], [8.0, 2480.0], [9.0, 2288.0], [10.0, 2476.0], [11.0, 3251.0], [12.0, 2664.0], [15.0, 2851.3333333333335], [16.0, 2469.0], [17.0, 2658.0], [18.0, 3030.0], [20.0, 2269.0], [22.0, 2928.0], [25.0, 2645.6666666666665], [26.0, 2833.0], [27.0, 2241.0], [30.0, 2499.6666666666665], [31.0, 2818.0], [35.0, 2426.3333333333335], [34.0, 2997.0], [36.0, 2423.0], [39.0, 2423.6666666666665], [41.0, 2414.0], [40.0, 2229.0], [44.0, 2476.0], [46.0, 2695.0], [49.0, 2666.6666666666665], [51.0, 2789.0], [54.0, 2459.75], [59.0, 2296.8], [61.0, 2591.5], [62.0, 2213.0], [67.0, 2763.0], [66.0, 2395.0], [65.0, 2204.0], [64.0, 2683.0], [70.0, 2191.0], [69.0, 2203.5], [75.0, 2347.0], [74.0, 2899.0], [73.0, 2190.0], [79.0, 2649.0], [76.0, 2138.0], [83.0, 2589.3333333333335], [80.0, 2520.0], [87.0, 2292.0], [84.0, 2806.0], [90.0, 2609.0], [89.0, 2224.5], [95.0, 2602.8], [98.0, 2031.0], [97.0, 2211.0], [96.0, 2597.0], [102.0, 2211.0], [101.0, 2025.3333333333333], [107.0, 388.0], [106.0, 2306.75], [109.0, 2013.0], [108.0, 2774.0], [112.0, 1539.25], [115.0, 2202.0], [114.0, 2016.0], [116.0, 2011.0], [122.0, 1161.0], [123.0, 2757.0], [121.0, 2232.0], [125.0, 1433.0], [127.0, 1248.0], [126.0, 2187.0], [124.0, 2007.0], [130.0, 131.0], [129.0, 136.0], [128.0, 129.0], [135.0, 2366.0], [134.0, 2000.0], [133.0, 2187.5], [131.0, 2090.25], [142.0, 1802.1666666666665], [141.0, 135.33333333333334], [138.0, 135.0], [136.0, 117.0], [143.0, 1984.0], [137.0, 2087.0], [145.0, 932.8], [147.0, 1988.0], [157.0, 2041.6666666666667], [156.0, 2355.0], [153.0, 1975.0], [152.0, 2047.1666666666667], [161.0, 167.66666666666666], [160.0, 1287.4], [165.0, 164.0], [167.0, 2251.5], [163.0, 2164.0], [162.0, 2066.0], [173.0, 2714.0], [172.0, 2115.0], [176.0, 174.0], [183.0, 2612.0], [182.0, 2332.0], [181.0, 2237.0], [177.0, 2145.25], [190.0, 1843.0], [189.0, 1661.0], [188.0, 2039.3333333333333], [185.0, 1944.5], [196.0, 1505.0], [199.0, 840.0], [198.0, 1641.0], [197.0, 1652.0], [194.0, 1651.0], [192.0, 1843.5], [200.0, 682.6666666666667], [201.0, 920.5], [203.0, 1158.3333333333333], [207.0, 2017.0], [206.0, 1636.0], [204.0, 1824.0], [209.0, 213.0], [211.0, 1625.0], [210.0, 2287.0], [208.0, 1625.0], [218.0, 74.0], [216.0, 1050.625], [217.0, 1209.5], [222.0, 2368.0], [221.0, 2195.0], [220.0, 1810.3333333333333], [231.0, 2266.0], [230.0, 1611.25], [226.0, 1610.0], [225.0, 1610.3333333333333], [239.0, 1499.0], [236.0, 1496.6666666666667], [233.0, 1881.0], [241.0, 770.0], [242.0, 873.0], [247.0, 276.0], [245.0, 1482.5], [243.0, 1677.0], [240.0, 1494.0], [254.0, 1461.0], [253.0, 1836.0], [252.0, 1463.0], [251.0, 1843.5], [249.0, 2389.0], [248.0, 1540.3333333333333], [270.0, 1630.0], [263.0, 121.0], [271.0, 2012.0], [269.0, 1538.5], [259.0, 1454.0], [258.0, 1836.0], [257.0, 1837.0], [256.0, 1650.0], [267.0, 1447.0], [266.0, 1723.0], [264.0, 1731.5], [262.0, 1454.0], [261.0, 1838.5], [285.0, 1431.5], [280.0, 170.25], [281.0, 79.0], [277.0, 80.0], [279.0, 1242.5], [273.0, 1439.0], [272.0, 1439.0], [278.0, 89.5], [276.0, 1151.75], [286.0, 1426.0], [283.0, 1434.0], [282.0, 1560.3333333333333], [300.0, 605.3333333333333], [298.0, 743.75], [299.0, 1607.0], [295.0, 1488.6666666666667], [292.0, 1425.5], [290.0, 1614.0], [289.0, 1553.6666666666667], [317.0, 1406.6666666666667], [319.0, 1400.0], [306.0, 1108.0], [304.0, 1558.5], [307.0, 1414.0], [315.0, 364.0], [318.0, 1399.0], [314.0, 1788.0], [313.0, 1406.5], [311.0, 1503.0], [309.0, 1412.0], [308.0, 1796.0], [333.0, 762.0], [326.0, 134.0], [335.0, 809.5], [332.0, 1581.5], [330.0, 2152.0], [329.0, 1394.0], [327.0, 1397.6666666666667], [324.0, 1590.5], [322.0, 1835.0], [348.0, 1471.0], [351.0, 1466.5], [339.0, 1223.3333333333333], [337.0, 1955.0], [336.0, 1766.0], [347.0, 152.0], [349.0, 1560.0], [346.0, 1374.0], [345.0, 1751.0], [343.0, 2136.0], [342.0, 2044.0], [340.0, 1568.0], [353.0, 164.0], [360.0, 692.0], [359.0, 874.6], [352.0, 1563.0], [366.0, 1354.0], [365.0, 1453.5], [363.0, 1482.3333333333333], [357.0, 1366.0], [355.0, 1366.0], [354.0, 1369.0], [380.0, 1333.0], [382.0, 1333.0], [373.0, 1100.0], [379.0, 606.5], [381.0, 1712.0], [378.0, 1528.0], [377.0, 1470.6666666666667], [374.0, 1345.0], [371.0, 1345.0], [370.0, 1537.0], [369.0, 1796.0], [399.0, 1316.0], [390.0, 1079.3333333333333], [388.0, 1145.0], [391.0, 763.5], [385.0, 2094.0], [384.0, 1620.5], [392.0, 401.0], [393.0, 1324.0], [398.0, 1311.0], [397.0, 1507.0], [395.0, 1315.0], [394.0, 1326.0], [401.0, 762.0], [405.0, 856.5], [404.0, 857.0], [403.0, 483.0], [402.0, 1313.0], [412.0, 1849.0], [400.0, 701.3333333333333], [406.0, 213.0], [407.0, 1304.5], [410.0, 870.5], [409.0, 1476.0], [408.0, 1283.0], [411.0, 1849.0], [415.0, 1282.0], [414.0, 1275.0], [413.0, 1285.0], [428.0, 1354.0], [422.0, 1020.2857142857143], [424.0, 217.66666666666666], [421.0, 421.0], [423.0, 741.0], [417.0, 1277.0], [416.0, 1276.0], [430.0, 1152.0], [429.0, 1162.0], [427.0, 1444.0], [426.0, 1261.3333333333333], [432.0, 433.0], [437.0, 238.0], [440.0, 691.5], [439.0, 695.5], [444.0, 1515.5], [434.0, 1150.0], [433.0, 1401.3333333333333], [442.0, 1705.0], [441.0, 1145.0], [438.0, 1245.5], [436.0, 1344.0], [461.0, 1130.0], [451.0, 253.5], [458.0, 880.5], [459.0, 1699.0], [457.0, 1171.6], [452.0, 1322.0], [450.0, 1133.0], [449.0, 1135.0], [448.0, 1143.25], [478.0, 1569.0], [479.0, 1561.0], [477.0, 1259.75], [473.0, 1117.0], [472.0, 1121.5], [470.0, 1121.0], [469.0, 1127.0], [468.0, 1127.0], [467.0, 1313.0], [466.0, 1129.6], [493.0, 1354.0], [490.0, 730.5], [489.0, 727.5], [495.0, 1357.0], [492.0, 1265.5], [488.0, 1122.3333333333333], [485.0, 1189.0], [484.0, 1181.5], [482.0, 992.0], [481.0, 1563.0], [480.0, 1564.0], [499.0, 1162.0], [510.0, 1328.0], [503.0, 915.0], [511.0, 955.0], [509.0, 1236.0], [507.0, 1059.0], [505.0, 962.5], [502.0, 1155.0], [500.0, 967.0], [497.0, 1167.0], [496.0, 1166.0], [541.0, 929.0], [512.0, 500.0], [527.0, 1038.0], [525.0, 946.0], [524.0, 1265.3333333333333], [521.0, 947.0], [520.0, 1044.0], [535.0, 523.0], [543.0, 345.0], [539.0, 1130.0], [538.0, 1315.0], [537.0, 1062.6666666666667], [518.0, 1141.0], [517.0, 1524.5], [515.0, 999.0], [534.0, 1004.3333333333334], [531.0, 1040.5], [529.0, 945.5], [571.0, 1002.0], [547.0, 769.3333333333333], [544.0, 739.1666666666667], [558.0, 922.0], [555.0, 1114.0], [554.0, 1212.0], [552.0, 933.0], [563.0, 614.6666666666666], [561.0, 877.75], [562.0, 912.0], [564.0, 732.0], [565.0, 615.6666666666666], [569.0, 906.0], [568.0, 907.3333333333334], [551.0, 1123.0], [550.0, 1122.0], [549.0, 934.0], [548.0, 1498.0], [605.0, 860.0], [577.0, 749.3636363636364], [591.0, 1062.0], [590.0, 877.0], [589.0, 1064.0], [588.0, 1067.0], [586.0, 880.0], [585.0, 1072.0], [584.0, 881.5], [578.0, 384.0], [579.0, 401.0], [580.0, 1016.0], [582.0, 1254.0], [581.0, 1083.0], [595.0, 755.0], [597.0, 1239.0], [596.0, 1061.0], [599.0, 1236.0], [598.0, 865.0], [594.0, 398.0], [607.0, 1047.0], [592.0, 868.0], [603.0, 986.0], [600.0, 862.0], [632.0, 756.6666666666666], [636.0, 829.0], [623.0, 969.6666666666666], [608.0, 1042.0], [613.0, 850.0], [610.0, 1044.0], [615.0, 1042.0], [614.0, 846.0], [620.0, 1212.0], [619.0, 844.0], [618.0, 842.0], [617.0, 1217.0], [616.0, 1221.0], [634.0, 635.5], [638.0, 1003.0], [626.0, 1211.0], [625.0, 1121.0], [635.0, 831.0], [633.0, 1206.0], [631.0, 832.0], [630.0, 1020.0], [629.0, 837.0], [627.0, 835.0], [644.0, 827.5], [640.0, 826.3333333333334], [653.0, 1008.0], [652.0, 909.5], [650.0, 911.0], [648.0, 815.6666666666666], [641.0, 635.0], [643.0, 639.0], [642.0, 1203.0], [663.0, 641.3333333333334], [662.0, 805.0], [661.0, 934.0], [658.0, 813.0], [657.0, 857.25], [664.0, 583.6666666666666], [645.0, 1006.0], [665.0, 799.0], [667.0, 946.0], [671.0, 924.6666666666666], [668.0, 795.0], [698.0, 850.0], [686.0, 775.6666666666666], [672.0, 482.0], [675.0, 883.25], [678.0, 1070.0], [676.0, 978.0], [696.0, 942.0], [679.0, 1161.0], [684.0, 621.6666666666666], [683.0, 790.0], [681.0, 786.0], [680.0, 1158.0], [685.0, 809.6666666666666], [701.0, 506.6666666666667], [700.0, 599.5], [702.0, 827.5], [694.0, 1129.0], [693.0, 827.3333333333334], [690.0, 1010.5], [688.0, 1148.5], [699.0, 747.0], [734.0, 815.75], [709.0, 847.6666666666666], [714.0, 698.0], [712.0, 738.0], [716.0, 726.0], [715.0, 1117.6666666666667], [718.0, 1102.0], [706.0, 1025.5], [704.0, 840.5], [708.0, 740.0], [707.0, 743.0], [717.0, 726.0], [735.0, 710.0], [722.0, 724.5], [720.0, 913.0], [733.0, 1026.3333333333333], [730.0, 711.3333333333334], [710.0, 933.0], [727.0, 905.0], [726.0, 906.0], [725.0, 905.0], [724.0, 909.5], [764.0, 877.0], [737.0, 534.0], [739.0, 895.0], [738.0, 706.6666666666666], [741.0, 908.6666666666666], [743.0, 892.0], [761.0, 868.0], [760.0, 1062.0], [740.0, 731.0], [746.0, 794.6666666666666], [745.0, 886.0], [744.0, 886.0], [749.0, 693.0], [748.0, 695.5], [751.0, 886.0], [754.0, 813.5], [758.0, 685.3333333333334], [755.0, 1069.0], [753.0, 747.0], [767.0, 674.3333333333334], [752.0, 693.0], [763.0, 1056.0], [762.0, 866.0], [795.0, 709.3333333333334], [772.0, 762.0], [773.0, 716.5], [779.0, 719.5], [778.0, 759.0], [776.0, 729.3333333333334], [781.0, 842.0], [783.0, 656.0], [770.0, 670.0], [768.0, 859.0], [782.0, 840.0], [796.0, 831.0], [785.0, 928.5], [793.0, 649.0], [791.0, 650.0], [790.0, 649.3333333333334], [787.0, 657.0], [786.0, 655.0], [815.0, 717.0], [816.0, 975.0], [813.0, 629.0], [812.0, 630.5], [810.0, 630.5], [808.0, 631.0], [807.0, 629.0], [806.0, 639.0], [805.0, 688.25], [801.0, 644.0], [800.0, 781.5], [1.0, 2486.0]], "isOverall": false, "label": "doBizA HTTP请求", "isController": false}, {"data": [[410.98000000000013, 1263.3330000000005]], "isOverall": false, "label": "doBizA HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 816.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2916.6666666666665, "minX": 1.74289746E12, "maxY": 3833.3333333333335, "series": [{"data": [[1.74289746E12, 3833.3333333333335]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74289746E12, 2916.6666666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74289746E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1263.3330000000005, "minX": 1.74289746E12, "maxY": 1263.3330000000005, "series": [{"data": [[1.74289746E12, 1263.3330000000005]], "isOverall": false, "label": "doBizA HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74289746E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1263.286000000001, "minX": 1.74289746E12, "maxY": 1263.286000000001, "series": [{"data": [[1.74289746E12, 1263.286000000001]], "isOverall": false, "label": "doBizA HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74289746E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.4340000000000001, "minX": 1.74289746E12, "maxY": 0.4340000000000001, "series": [{"data": [[1.74289746E12, 0.4340000000000001]], "isOverall": false, "label": "doBizA HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74289746E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 23.0, "minX": 1.74289746E12, "maxY": 3251.0, "series": [{"data": [[1.74289746E12, 3251.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74289746E12, 2240.7]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74289746E12, 2908.96]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74289746E12, 2598.95]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.74289746E12, 23.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74289746E12, 1157.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74289746E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 296.5, "minX": 83.0, "maxY": 2469.0, "series": [{"data": [[83.0, 2469.0], [344.0, 1634.0], [184.0, 296.5], [389.0, 953.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 389.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 296.5, "minX": 83.0, "maxY": 2469.0, "series": [{"data": [[83.0, 2469.0], [344.0, 1634.0], [184.0, 296.5], [389.0, 953.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 389.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.74289746E12, "maxY": 16.666666666666668, "series": [{"data": [[1.74289746E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74289746E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.74289746E12, "maxY": 16.666666666666668, "series": [{"data": [[1.74289746E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74289746E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.74289746E12, "maxY": 16.666666666666668, "series": [{"data": [[1.74289746E12, 16.666666666666668]], "isOverall": false, "label": "doBizA HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74289746E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.74289746E12, "maxY": 16.666666666666668, "series": [{"data": [[1.74289746E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74289746E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

