/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1249.0, "minX": 0.0, "maxY": 8830.0, "series": [{"data": [[0.0, 1249.0], [0.1, 1279.0], [0.2, 1321.0], [0.3, 1321.0], [0.4, 1327.0], [0.5, 1336.0], [0.6, 1341.0], [0.7, 1342.0], [0.8, 1343.0], [0.9, 1346.0], [1.0, 1351.0], [1.1, 1356.0], [1.2, 1360.0], [1.3, 1364.0], [1.4, 1364.0], [1.5, 1367.0], [1.6, 1391.0], [1.7, 1392.0], [1.8, 1405.0], [1.9, 1407.0], [2.0, 1420.0], [2.1, 1424.0], [2.2, 1504.0], [2.3, 1504.0], [2.4, 1509.0], [2.5, 1509.0], [2.6, 1513.0], [2.7, 1516.0], [2.8, 1516.0], [2.9, 1545.0], [3.0, 1550.0], [3.1, 1570.0], [3.2, 1581.0], [3.3, 1601.0], [3.4, 1609.0], [3.5, 1610.0], [3.6, 1613.0], [3.7, 1626.0], [3.8, 1626.0], [3.9, 1657.0], [4.0, 1675.0], [4.1, 1675.0], [4.2, 1678.0], [4.3, 1681.0], [4.4, 1684.0], [4.5, 1688.0], [4.6, 1688.0], [4.7, 1691.0], [4.8, 1722.0], [4.9, 1728.0], [5.0, 1732.0], [5.1, 1737.0], [5.2, 1747.0], [5.3, 1748.0], [5.4, 1752.0], [5.5, 1758.0], [5.6, 1761.0], [5.7, 1770.0], [5.8, 1782.0], [5.9, 1787.0], [6.0, 1796.0], [6.1, 1799.0], [6.2, 1801.0], [6.3, 1805.0], [6.4, 1807.0], [6.5, 1833.0], [6.6, 1835.0], [6.7, 1835.0], [6.8, 1846.0], [6.9, 1849.0], [7.0, 1850.0], [7.1, 1878.0], [7.2, 1890.0], [7.3, 1893.0], [7.4, 1898.0], [7.5, 1900.0], [7.6, 1906.0], [7.7, 1923.0], [7.8, 1932.0], [7.9, 1935.0], [8.0, 1938.0], [8.1, 1940.0], [8.2, 1942.0], [8.3, 1942.0], [8.4, 1943.0], [8.5, 1970.0], [8.6, 1974.0], [8.7, 1982.0], [8.8, 1983.0], [8.9, 1986.0], [9.0, 1987.0], [9.1, 1987.0], [9.2, 2000.0], [9.3, 2002.0], [9.4, 2016.0], [9.5, 2019.0], [9.6, 2026.0], [9.7, 2026.0], [9.8, 2028.0], [9.9, 2028.0], [10.0, 2030.0], [10.1, 2031.0], [10.2, 2036.0], [10.3, 2044.0], [10.4, 2048.0], [10.5, 2049.0], [10.6, 2053.0], [10.7, 2059.0], [10.8, 2064.0], [10.9, 2065.0], [11.0, 2075.0], [11.1, 2075.0], [11.2, 2076.0], [11.3, 2078.0], [11.4, 2095.0], [11.5, 2107.0], [11.6, 2120.0], [11.7, 2126.0], [11.8, 2127.0], [11.9, 2128.0], [12.0, 2171.0], [12.1, 2172.0], [12.2, 2191.0], [12.3, 2192.0], [12.4, 2197.0], [12.5, 2204.0], [12.6, 2212.0], [12.7, 2220.0], [12.8, 2227.0], [12.9, 2247.0], [13.0, 2252.0], [13.1, 2255.0], [13.2, 2267.0], [13.3, 2268.0], [13.4, 2270.0], [13.5, 2276.0], [13.6, 2276.0], [13.7, 2277.0], [13.8, 2280.0], [13.9, 2288.0], [14.0, 2298.0], [14.1, 2300.0], [14.2, 2336.0], [14.3, 2341.0], [14.4, 2342.0], [14.5, 2345.0], [14.6, 2346.0], [14.7, 2347.0], [14.8, 2348.0], [14.9, 2350.0], [15.0, 2352.0], [15.1, 2361.0], [15.2, 2370.0], [15.3, 2373.0], [15.4, 2376.0], [15.5, 2376.0], [15.6, 2378.0], [15.7, 2399.0], [15.8, 2413.0], [15.9, 2418.0], [16.0, 2424.0], [16.1, 2439.0], [16.2, 2453.0], [16.3, 2455.0], [16.4, 2457.0], [16.5, 2476.0], [16.6, 2498.0], [16.7, 2503.0], [16.8, 2507.0], [16.9, 2510.0], [17.0, 2512.0], [17.1, 2515.0], [17.2, 2517.0], [17.3, 2520.0], [17.4, 2520.0], [17.5, 2521.0], [17.6, 2523.0], [17.7, 2525.0], [17.8, 2526.0], [17.9, 2529.0], [18.0, 2548.0], [18.1, 2559.0], [18.2, 2562.0], [18.3, 2569.0], [18.4, 2570.0], [18.5, 2574.0], [18.6, 2602.0], [18.7, 2619.0], [18.8, 2628.0], [18.9, 2633.0], [19.0, 2646.0], [19.1, 2652.0], [19.2, 2652.0], [19.3, 2658.0], [19.4, 2658.0], [19.5, 2659.0], [19.6, 2748.0], [19.7, 2751.0], [19.8, 2752.0], [19.9, 2764.0], [20.0, 2774.0], [20.1, 2787.0], [20.2, 2815.0], [20.3, 2816.0], [20.4, 2817.0], [20.5, 2821.0], [20.6, 2824.0], [20.7, 2825.0], [20.8, 2827.0], [20.9, 2828.0], [21.0, 2829.0], [21.1, 2834.0], [21.2, 2834.0], [21.3, 2843.0], [21.4, 2843.0], [21.5, 2844.0], [21.6, 2851.0], [21.7, 2853.0], [21.8, 2853.0], [21.9, 2858.0], [22.0, 2861.0], [22.1, 2865.0], [22.2, 2873.0], [22.3, 2876.0], [22.4, 2879.0], [22.5, 2883.0], [22.6, 2884.0], [22.7, 2885.0], [22.8, 2893.0], [22.9, 2935.0], [23.0, 2938.0], [23.1, 2938.0], [23.2, 2956.0], [23.3, 2961.0], [23.4, 2961.0], [23.5, 2961.0], [23.6, 2964.0], [23.7, 2965.0], [23.8, 2969.0], [23.9, 2986.0], [24.0, 2995.0], [24.1, 3013.0], [24.2, 3016.0], [24.3, 3020.0], [24.4, 3042.0], [24.5, 3063.0], [24.6, 3065.0], [24.7, 3071.0], [24.8, 3110.0], [24.9, 3114.0], [25.0, 3122.0], [25.1, 3129.0], [25.2, 3132.0], [25.3, 3138.0], [25.4, 3149.0], [25.5, 3153.0], [25.6, 3156.0], [25.7, 3161.0], [25.8, 3173.0], [25.9, 3226.0], [26.0, 3249.0], [26.1, 3258.0], [26.2, 3272.0], [26.3, 3275.0], [26.4, 3281.0], [26.5, 3287.0], [26.6, 3289.0], [26.7, 3290.0], [26.8, 3292.0], [26.9, 3318.0], [27.0, 3323.0], [27.1, 3329.0], [27.2, 3333.0], [27.3, 3338.0], [27.4, 3373.0], [27.5, 3378.0], [27.6, 3387.0], [27.7, 3423.0], [27.8, 3438.0], [27.9, 3440.0], [28.0, 3440.0], [28.1, 3441.0], [28.2, 3466.0], [28.3, 3466.0], [28.4, 3467.0], [28.5, 3472.0], [28.6, 3482.0], [28.7, 3487.0], [28.8, 3488.0], [28.9, 3494.0], [29.0, 3495.0], [29.1, 3505.0], [29.2, 3506.0], [29.3, 3509.0], [29.4, 3516.0], [29.5, 3586.0], [29.6, 3624.0], [29.7, 3628.0], [29.8, 3642.0], [29.9, 3645.0], [30.0, 3647.0], [30.1, 3664.0], [30.2, 3665.0], [30.3, 3668.0], [30.4, 3686.0], [30.5, 3693.0], [30.6, 3695.0], [30.7, 3697.0], [30.8, 3711.0], [30.9, 3712.0], [31.0, 3732.0], [31.1, 3733.0], [31.2, 3742.0], [31.3, 3756.0], [31.4, 3757.0], [31.5, 3759.0], [31.6, 3764.0], [31.7, 3769.0], [31.8, 3769.0], [31.9, 3770.0], [32.0, 3774.0], [32.1, 3787.0], [32.2, 3831.0], [32.3, 3836.0], [32.4, 3836.0], [32.5, 3838.0], [32.6, 3855.0], [32.7, 3882.0], [32.8, 3889.0], [32.9, 3892.0], [33.0, 3894.0], [33.1, 3897.0], [33.2, 3900.0], [33.3, 3900.0], [33.4, 3924.0], [33.5, 3924.0], [33.6, 3929.0], [33.7, 3930.0], [33.8, 3934.0], [33.9, 3936.0], [34.0, 3939.0], [34.1, 3940.0], [34.2, 3953.0], [34.3, 3955.0], [34.4, 3965.0], [34.5, 3967.0], [34.6, 3971.0], [34.7, 3982.0], [34.8, 3985.0], [34.9, 3985.0], [35.0, 3985.0], [35.1, 4006.0], [35.2, 4009.0], [35.3, 4026.0], [35.4, 4028.0], [35.5, 4031.0], [35.6, 4036.0], [35.7, 4036.0], [35.8, 4039.0], [35.9, 4047.0], [36.0, 4048.0], [36.1, 4056.0], [36.2, 4066.0], [36.3, 4075.0], [36.4, 4075.0], [36.5, 4082.0], [36.6, 4085.0], [36.7, 4085.0], [36.8, 4099.0], [36.9, 4100.0], [37.0, 4101.0], [37.1, 4104.0], [37.2, 4106.0], [37.3, 4110.0], [37.4, 4115.0], [37.5, 4125.0], [37.6, 4125.0], [37.7, 4144.0], [37.8, 4146.0], [37.9, 4157.0], [38.0, 4164.0], [38.1, 4226.0], [38.2, 4227.0], [38.3, 4227.0], [38.4, 4245.0], [38.5, 4261.0], [38.6, 4262.0], [38.7, 4262.0], [38.8, 4263.0], [38.9, 4275.0], [39.0, 4278.0], [39.1, 4278.0], [39.2, 4291.0], [39.3, 4291.0], [39.4, 4294.0], [39.5, 4297.0], [39.6, 4301.0], [39.7, 4301.0], [39.8, 4316.0], [39.9, 4355.0], [40.0, 4359.0], [40.1, 4362.0], [40.2, 4375.0], [40.3, 4390.0], [40.4, 4419.0], [40.5, 4423.0], [40.6, 4426.0], [40.7, 4435.0], [40.8, 4436.0], [40.9, 4438.0], [41.0, 4445.0], [41.1, 4446.0], [41.2, 4448.0], [41.3, 4448.0], [41.4, 4448.0], [41.5, 4450.0], [41.6, 4451.0], [41.7, 4453.0], [41.8, 4456.0], [41.9, 4460.0], [42.0, 4460.0], [42.1, 4462.0], [42.2, 4469.0], [42.3, 4476.0], [42.4, 4480.0], [42.5, 4484.0], [42.6, 4501.0], [42.7, 4506.0], [42.8, 4510.0], [42.9, 4513.0], [43.0, 4521.0], [43.1, 4525.0], [43.2, 4547.0], [43.3, 4552.0], [43.4, 4562.0], [43.5, 4605.0], [43.6, 4606.0], [43.7, 4614.0], [43.8, 4626.0], [43.9, 4629.0], [44.0, 4630.0], [44.1, 4645.0], [44.2, 4647.0], [44.3, 4649.0], [44.4, 4656.0], [44.5, 4657.0], [44.6, 4662.0], [44.7, 4667.0], [44.8, 4671.0], [44.9, 4693.0], [45.0, 4694.0], [45.1, 4699.0], [45.2, 4700.0], [45.3, 4702.0], [45.4, 4721.0], [45.5, 4725.0], [45.6, 4738.0], [45.7, 4743.0], [45.8, 4747.0], [45.9, 4788.0], [46.0, 4803.0], [46.1, 4811.0], [46.2, 4831.0], [46.3, 4839.0], [46.4, 4840.0], [46.5, 4854.0], [46.6, 4866.0], [46.7, 4882.0], [46.8, 4884.0], [46.9, 4889.0], [47.0, 4890.0], [47.1, 4892.0], [47.2, 4892.0], [47.3, 4893.0], [47.4, 4893.0], [47.5, 4894.0], [47.6, 4907.0], [47.7, 4912.0], [47.8, 4935.0], [47.9, 4940.0], [48.0, 4940.0], [48.1, 4947.0], [48.2, 4949.0], [48.3, 4949.0], [48.4, 4973.0], [48.5, 4985.0], [48.6, 4986.0], [48.7, 4987.0], [48.8, 4988.0], [48.9, 5012.0], [49.0, 5022.0], [49.1, 5023.0], [49.2, 5028.0], [49.3, 5037.0], [49.4, 5062.0], [49.5, 5063.0], [49.6, 5085.0], [49.7, 5097.0], [49.8, 5110.0], [49.9, 5114.0], [50.0, 5114.0], [50.1, 5142.0], [50.2, 5160.0], [50.3, 5178.0], [50.4, 5186.0], [50.5, 5186.0], [50.6, 5188.0], [50.7, 5201.0], [50.8, 5213.0], [50.9, 5223.0], [51.0, 5223.0], [51.1, 5224.0], [51.2, 5233.0], [51.3, 5248.0], [51.4, 5248.0], [51.5, 5252.0], [51.6, 5263.0], [51.7, 5266.0], [51.8, 5266.0], [51.9, 5270.0], [52.0, 5284.0], [52.1, 5302.0], [52.2, 5304.0], [52.3, 5313.0], [52.4, 5314.0], [52.5, 5316.0], [52.6, 5323.0], [52.7, 5327.0], [52.8, 5330.0], [52.9, 5336.0], [53.0, 5348.0], [53.1, 5349.0], [53.2, 5354.0], [53.3, 5364.0], [53.4, 5365.0], [53.5, 5371.0], [53.6, 5376.0], [53.7, 5378.0], [53.8, 5381.0], [53.9, 5394.0], [54.0, 5394.0], [54.1, 5400.0], [54.2, 5401.0], [54.3, 5405.0], [54.4, 5405.0], [54.5, 5418.0], [54.6, 5419.0], [54.7, 5423.0], [54.8, 5424.0], [54.9, 5425.0], [55.0, 5425.0], [55.1, 5426.0], [55.2, 5437.0], [55.3, 5441.0], [55.4, 5444.0], [55.5, 5445.0], [55.6, 5447.0], [55.7, 5454.0], [55.8, 5459.0], [55.9, 5464.0], [56.0, 5465.0], [56.1, 5468.0], [56.2, 5478.0], [56.3, 5481.0], [56.4, 5483.0], [56.5, 5487.0], [56.6, 5490.0], [56.7, 5492.0], [56.8, 5494.0], [56.9, 5494.0], [57.0, 5499.0], [57.1, 5501.0], [57.2, 5503.0], [57.3, 5504.0], [57.4, 5504.0], [57.5, 5510.0], [57.6, 5510.0], [57.7, 5515.0], [57.8, 5521.0], [57.9, 5525.0], [58.0, 5529.0], [58.1, 5572.0], [58.2, 5614.0], [58.3, 5615.0], [58.4, 5620.0], [58.5, 5621.0], [58.6, 5622.0], [58.7, 5627.0], [58.8, 5635.0], [58.9, 5636.0], [59.0, 5638.0], [59.1, 5639.0], [59.2, 5642.0], [59.3, 5653.0], [59.4, 5656.0], [59.5, 5658.0], [59.6, 5659.0], [59.7, 5659.0], [59.8, 5662.0], [59.9, 5663.0], [60.0, 5664.0], [60.1, 5664.0], [60.2, 5669.0], [60.3, 5670.0], [60.4, 5674.0], [60.5, 5689.0], [60.6, 5695.0], [60.7, 5696.0], [60.8, 5698.0], [60.9, 5701.0], [61.0, 5703.0], [61.1, 5704.0], [61.2, 5704.0], [61.3, 5704.0], [61.4, 5706.0], [61.5, 5708.0], [61.6, 5715.0], [61.7, 5715.0], [61.8, 5717.0], [61.9, 5718.0], [62.0, 5719.0], [62.1, 5726.0], [62.2, 5735.0], [62.3, 5735.0], [62.4, 5736.0], [62.5, 5736.0], [62.6, 5737.0], [62.7, 5738.0], [62.8, 5744.0], [62.9, 5748.0], [63.0, 5765.0], [63.1, 5769.0], [63.2, 5844.0], [63.3, 5847.0], [63.4, 5848.0], [63.5, 5855.0], [63.6, 5862.0], [63.7, 5865.0], [63.8, 5869.0], [63.9, 5869.0], [64.0, 5886.0], [64.1, 5887.0], [64.2, 5888.0], [64.3, 5888.0], [64.4, 5888.0], [64.5, 5892.0], [64.6, 5896.0], [64.7, 5901.0], [64.8, 5923.0], [64.9, 5932.0], [65.0, 5933.0], [65.1, 5934.0], [65.2, 5940.0], [65.3, 5940.0], [65.4, 5944.0], [65.5, 5944.0], [65.6, 5947.0], [65.7, 5947.0], [65.8, 5979.0], [65.9, 5982.0], [66.0, 6000.0], [66.1, 6011.0], [66.2, 6085.0], [66.3, 6086.0], [66.4, 6090.0], [66.5, 6101.0], [66.6, 6107.0], [66.7, 6115.0], [66.8, 6124.0], [66.9, 6126.0], [67.0, 6130.0], [67.1, 6130.0], [67.2, 6130.0], [67.3, 6151.0], [67.4, 6152.0], [67.5, 6153.0], [67.6, 6157.0], [67.7, 6157.0], [67.8, 6158.0], [67.9, 6158.0], [68.0, 6164.0], [68.1, 6178.0], [68.2, 6181.0], [68.3, 6181.0], [68.4, 6201.0], [68.5, 6283.0], [68.6, 6290.0], [68.7, 6334.0], [68.8, 6335.0], [68.9, 6364.0], [69.0, 6386.0], [69.1, 6387.0], [69.2, 6389.0], [69.3, 6390.0], [69.4, 6399.0], [69.5, 6456.0], [69.6, 6458.0], [69.7, 6459.0], [69.8, 6462.0], [69.9, 6497.0], [70.0, 6500.0], [70.1, 6502.0], [70.2, 6503.0], [70.3, 6504.0], [70.4, 6505.0], [70.5, 6506.0], [70.6, 6508.0], [70.7, 6511.0], [70.8, 6511.0], [70.9, 6511.0], [71.0, 6512.0], [71.1, 6516.0], [71.2, 6516.0], [71.3, 6517.0], [71.4, 6517.0], [71.5, 6517.0], [71.6, 6518.0], [71.7, 6518.0], [71.8, 6519.0], [71.9, 6529.0], [72.0, 6529.0], [72.1, 6534.0], [72.2, 6534.0], [72.3, 6536.0], [72.4, 6538.0], [72.5, 6541.0], [72.6, 6546.0], [72.7, 6549.0], [72.8, 6554.0], [72.9, 6556.0], [73.0, 6559.0], [73.1, 6562.0], [73.2, 6566.0], [73.3, 6573.0], [73.4, 6580.0], [73.5, 6584.0], [73.6, 6589.0], [73.7, 6592.0], [73.8, 6594.0], [73.9, 6595.0], [74.0, 6623.0], [74.1, 6625.0], [74.2, 6625.0], [74.3, 6626.0], [74.4, 6630.0], [74.5, 6633.0], [74.6, 6633.0], [74.7, 6671.0], [74.8, 6671.0], [74.9, 6676.0], [75.0, 6687.0], [75.1, 6702.0], [75.2, 6710.0], [75.3, 6710.0], [75.4, 6711.0], [75.5, 6715.0], [75.6, 6723.0], [75.7, 6751.0], [75.8, 6755.0], [75.9, 6755.0], [76.0, 6756.0], [76.1, 6757.0], [76.2, 6759.0], [76.3, 6760.0], [76.4, 6761.0], [76.5, 6762.0], [76.6, 6770.0], [76.7, 6786.0], [76.8, 6788.0], [76.9, 6793.0], [77.0, 6795.0], [77.1, 6798.0], [77.2, 6800.0], [77.3, 6802.0], [77.4, 6803.0], [77.5, 6805.0], [77.6, 6833.0], [77.7, 6849.0], [77.8, 6849.0], [77.9, 6852.0], [78.0, 6865.0], [78.1, 6883.0], [78.2, 6897.0], [78.3, 6902.0], [78.4, 6906.0], [78.5, 6921.0], [78.6, 6922.0], [78.7, 6925.0], [78.8, 6928.0], [78.9, 6939.0], [79.0, 6940.0], [79.1, 6944.0], [79.2, 6955.0], [79.3, 6964.0], [79.4, 6974.0], [79.5, 6975.0], [79.6, 6986.0], [79.7, 6990.0], [79.8, 6992.0], [79.9, 6994.0], [80.0, 6999.0], [80.1, 7001.0], [80.2, 7013.0], [80.3, 7029.0], [80.4, 7040.0], [80.5, 7041.0], [80.6, 7054.0], [80.7, 7057.0], [80.8, 7066.0], [80.9, 7067.0], [81.0, 7112.0], [81.1, 7113.0], [81.2, 7117.0], [81.3, 7143.0], [81.4, 7144.0], [81.5, 7157.0], [81.6, 7173.0], [81.7, 7196.0], [81.8, 7201.0], [81.9, 7203.0], [82.0, 7204.0], [82.1, 7214.0], [82.2, 7215.0], [82.3, 7217.0], [82.4, 7226.0], [82.5, 7231.0], [82.6, 7239.0], [82.7, 7241.0], [82.8, 7252.0], [82.9, 7259.0], [83.0, 7259.0], [83.1, 7261.0], [83.2, 7261.0], [83.3, 7261.0], [83.4, 7261.0], [83.5, 7261.0], [83.6, 7262.0], [83.7, 7270.0], [83.8, 7288.0], [83.9, 7292.0], [84.0, 7293.0], [84.1, 7300.0], [84.2, 7300.0], [84.3, 7304.0], [84.4, 7309.0], [84.5, 7312.0], [84.6, 7321.0], [84.7, 7321.0], [84.8, 7349.0], [84.9, 7359.0], [85.0, 7363.0], [85.1, 7364.0], [85.2, 7376.0], [85.3, 7376.0], [85.4, 7384.0], [85.5, 7386.0], [85.6, 7387.0], [85.7, 7389.0], [85.8, 7390.0], [85.9, 7391.0], [86.0, 7413.0], [86.1, 7416.0], [86.2, 7419.0], [86.3, 7419.0], [86.4, 7424.0], [86.5, 7426.0], [86.6, 7434.0], [86.7, 7440.0], [86.8, 7441.0], [86.9, 7441.0], [87.0, 7441.0], [87.1, 7447.0], [87.2, 7450.0], [87.3, 7460.0], [87.4, 7468.0], [87.5, 7470.0], [87.6, 7470.0], [87.7, 7470.0], [87.8, 7471.0], [87.9, 7472.0], [88.0, 7475.0], [88.1, 7481.0], [88.2, 7482.0], [88.3, 7483.0], [88.4, 7484.0], [88.5, 7502.0], [88.6, 7516.0], [88.7, 7516.0], [88.8, 7524.0], [88.9, 7525.0], [89.0, 7528.0], [89.1, 7540.0], [89.2, 7540.0], [89.3, 7541.0], [89.4, 7563.0], [89.5, 7573.0], [89.6, 7587.0], [89.7, 7590.0], [89.8, 7592.0], [89.9, 7595.0], [90.0, 7595.0], [90.1, 7596.0], [90.2, 7601.0], [90.3, 7602.0], [90.4, 7603.0], [90.5, 7603.0], [90.6, 7604.0], [90.7, 7610.0], [90.8, 7610.0], [90.9, 7610.0], [91.0, 7612.0], [91.1, 7613.0], [91.2, 7614.0], [91.3, 7618.0], [91.4, 7620.0], [91.5, 7621.0], [91.6, 7623.0], [91.7, 7623.0], [91.8, 7629.0], [91.9, 7634.0], [92.0, 7635.0], [92.1, 7636.0], [92.2, 7637.0], [92.3, 7638.0], [92.4, 7639.0], [92.5, 7640.0], [92.6, 7641.0], [92.7, 7644.0], [92.8, 7644.0], [92.9, 7648.0], [93.0, 7650.0], [93.1, 7651.0], [93.2, 7652.0], [93.3, 7652.0], [93.4, 7653.0], [93.5, 7653.0], [93.6, 7655.0], [93.7, 7658.0], [93.8, 7664.0], [93.9, 7665.0], [94.0, 7668.0], [94.1, 7668.0], [94.2, 7669.0], [94.3, 7669.0], [94.4, 7672.0], [94.5, 7674.0], [94.6, 7676.0], [94.7, 7681.0], [94.8, 7684.0], [94.9, 7687.0], [95.0, 7688.0], [95.1, 7688.0], [95.2, 7690.0], [95.3, 7697.0], [95.4, 7700.0], [95.5, 7702.0], [95.6, 7714.0], [95.7, 7715.0], [95.8, 7717.0], [95.9, 7719.0], [96.0, 7721.0], [96.1, 7722.0], [96.2, 7724.0], [96.3, 7730.0], [96.4, 7734.0], [96.5, 7746.0], [96.6, 7763.0], [96.7, 7767.0], [96.8, 7771.0], [96.9, 7773.0], [97.0, 7777.0], [97.1, 7777.0], [97.2, 7779.0], [97.3, 7800.0], [97.4, 7828.0], [97.5, 7830.0], [97.6, 7853.0], [97.7, 7873.0], [97.8, 7875.0], [97.9, 7934.0], [98.0, 7940.0], [98.1, 7946.0], [98.2, 7965.0], [98.3, 7965.0], [98.4, 7986.0], [98.5, 7989.0], [98.6, 7992.0], [98.7, 8010.0], [98.8, 8011.0], [98.9, 8016.0], [99.0, 8017.0], [99.1, 8040.0], [99.2, 8059.0], [99.3, 8069.0], [99.4, 8111.0], [99.5, 8125.0], [99.6, 8221.0], [99.7, 8232.0], [99.8, 8259.0], [99.9, 8830.0]], "isOverall": false, "label": "doBizA HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1200.0, "maxY": 52.0, "series": [{"data": [[1200.0, 2.0], [1300.0, 15.0], [1400.0, 4.0], [1500.0, 11.0], [1600.0, 15.0], [1700.0, 15.0], [1800.0, 13.0], [1900.0, 17.0], [2000.0, 23.0], [2100.0, 10.0], [2200.0, 16.0], [2300.0, 17.0], [2400.0, 9.0], [2500.0, 19.0], [2600.0, 9.0], [2700.0, 6.0], [2800.0, 27.0], [2900.0, 12.0], [3000.0, 7.0], [3100.0, 11.0], [3200.0, 10.0], [3300.0, 8.0], [3400.0, 14.0], [3500.0, 5.0], [3700.0, 14.0], [3600.0, 12.0], [3800.0, 10.0], [3900.0, 19.0], [4000.0, 18.0], [4100.0, 12.0], [4200.0, 15.0], [4300.0, 8.0], [4400.0, 22.0], [4500.0, 9.0], [4600.0, 17.0], [4700.0, 8.0], [4800.0, 16.0], [4900.0, 13.0], [5000.0, 9.0], [5100.0, 9.0], [5200.0, 14.0], [5300.0, 20.0], [5400.0, 30.0], [5500.0, 11.0], [5600.0, 27.0], [5700.0, 23.0], [5800.0, 15.0], [5900.0, 13.0], [6000.0, 5.0], [6100.0, 19.0], [6200.0, 3.0], [6300.0, 8.0], [6600.0, 11.0], [6500.0, 40.0], [6400.0, 5.0], [6700.0, 21.0], [6900.0, 19.0], [6800.0, 11.0], [7000.0, 9.0], [7100.0, 8.0], [7200.0, 23.0], [7300.0, 19.0], [7400.0, 25.0], [7600.0, 52.0], [7500.0, 17.0], [7700.0, 19.0], [7900.0, 8.0], [7800.0, 6.0], [8100.0, 2.0], [8000.0, 7.0], [8200.0, 3.0], [8800.0, 1.0]], "isOverall": false, "label": "doBizA HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 21.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 979.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 21.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 979.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 500.870000000001, "minX": 1.74289758E12, "maxY": 500.870000000001, "series": [{"data": [[1.74289758E12, 500.870000000001]], "isOverall": false, "label": "并发线程组", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74289758E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1303.0, "minX": 5.0, "maxY": 8240.5, "series": [{"data": [[5.0, 7728.8], [6.0, 7773.0], [7.0, 7697.0], [8.0, 7702.0], [9.0, 7721.0], [10.0, 8069.0], [11.0, 7690.0], [13.0, 7681.0], [16.0, 7811.333333333333], [18.0, 7858.0], [19.0, 7658.0], [20.0, 8232.0], [21.0, 7652.0], [23.0, 8240.5], [26.0, 8012.333333333333], [27.0, 7648.0], [28.0, 8017.0], [29.0, 7986.0], [30.0, 7992.0], [31.0, 7989.0], [33.0, 7621.0], [32.0, 7610.0], [35.0, 7965.0], [34.0, 7965.0], [37.0, 7946.0], [36.0, 7604.0], [39.0, 7587.0], [38.0, 7596.0], [41.0, 7827.0], [43.0, 8125.0], [42.0, 7563.0], [45.0, 7672.0], [44.0, 7623.0], [49.0, 7665.0], [48.0, 7672.666666666667], [51.0, 7655.0], [50.0, 7664.0], [52.0, 7875.0], [54.0, 7761.5], [57.0, 7637.0], [58.0, 7634.0], [60.0, 7736.5], [65.0, 7828.0], [64.0, 7642.75], [70.0, 7631.5], [68.0, 7701.333333333333], [75.0, 7606.5], [73.0, 7612.0], [72.0, 7621.5], [79.0, 7777.0], [78.0, 7610.0], [77.0, 7691.0], [83.0, 7595.0], [82.0, 7763.0], [81.0, 7767.0], [80.0, 7595.0], [87.0, 7724.0], [86.0, 7730.0], [85.0, 7734.0], [84.0, 7573.0], [89.0, 7525.0], [88.0, 7528.0], [95.0, 7484.0], [94.0, 7668.5], [92.0, 7572.0], [99.0, 7471.0], [98.0, 7472.0], [97.0, 7475.0], [96.0, 7482.0], [103.0, 7441.0], [102.0, 7450.0], [101.0, 7468.0], [100.0, 7470.0], [107.0, 7425.0], [105.0, 7440.0], [104.0, 7441.0], [111.0, 7590.0], [110.0, 7416.0], [109.0, 7419.0], [108.0, 7419.0], [115.0, 7825.0], [113.0, 7800.0], [112.0, 8221.0], [119.0, 7363.0], [118.0, 7364.0], [117.0, 7376.0], [122.0, 7349.0], [121.0, 7540.5], [126.0, 7321.0], [125.0, 7746.0], [124.0, 7825.5], [135.0, 7483.0], [134.0, 7397.0], [132.0, 7293.0], [131.0, 7300.0], [129.0, 7593.0], [143.0, 7350.5], [141.0, 7259.0], [139.0, 7261.0], [136.0, 7262.0], [149.0, 7321.0], [147.0, 7644.0], [146.0, 7447.0], [145.0, 7214.0], [144.0, 7231.0], [159.0, 7387.0], [158.0, 7453.333333333333], [155.0, 7173.0], [154.0, 7413.0], [153.0, 7641.0], [152.0, 7280.333333333333], [167.0, 7113.0], [166.0, 7359.0], [165.0, 7117.0], [164.0, 7460.0], [162.0, 7592.0], [161.0, 7388.0], [175.0, 7057.0], [174.0, 7304.0], [173.0, 7054.0], [172.0, 7309.0], [171.0, 7700.0], [170.0, 7066.0], [169.0, 7312.0], [168.0, 7112.0], [181.0, 7470.0], [180.0, 7255.0], [178.0, 7164.0], [176.0, 7041.0], [191.0, 7226.0], [190.0, 7239.0], [189.0, 6990.0], [188.0, 7001.0], [187.0, 7252.0], [186.0, 6999.0], [185.0, 7470.0], [184.0, 7178.333333333333], [199.0, 6992.0], [198.0, 7644.0], [197.0, 6986.0], [196.0, 6994.0], [195.0, 7618.0], [194.0, 7216.0], [192.0, 6975.0], [207.0, 6949.0], [206.0, 6955.0], [205.0, 6964.0], [204.0, 6594.0], [203.0, 7384.0], [202.0, 6595.0], [201.0, 7389.0], [200.0, 7196.0], [215.0, 6921.0], [214.0, 6559.0], [213.0, 6580.0], [212.0, 7144.0], [211.0, 6925.0], [210.0, 6588.333333333333], [222.0, 6534.0], [221.0, 6538.0], [220.0, 6534.0], [219.0, 6906.0], [218.0, 6536.0], [217.0, 6902.0], [216.0, 6549.0], [231.0, 6849.0], [230.0, 6850.5], [228.0, 6502.5], [226.0, 6865.0], [225.0, 6883.0], [224.0, 6535.0], [239.0, 6805.0], [238.0, 6798.0], [237.0, 6788.0], [236.0, 6803.0], [235.0, 6833.0], [234.0, 6967.666666666667], [247.0, 6762.0], [246.0, 6761.0], [245.0, 6683.0], [243.0, 6712.5], [241.0, 6800.0], [240.0, 6795.0], [255.0, 6798.6], [250.0, 6529.0], [249.0, 6759.5], [270.0, 6506.0], [271.0, 6508.0], [269.0, 6587.5], [267.0, 6512.0], [266.0, 6687.0], [265.0, 6710.0], [264.0, 6781.0], [261.0, 6517.5], [258.0, 6831.0], [256.0, 6944.0], [259.0, 6715.0], [285.0, 6626.0], [286.0, 6755.0], [284.0, 6456.0], [275.0, 6497.0], [274.0, 6699.5], [272.0, 6671.0], [283.0, 6542.0], [281.0, 6458.0], [280.0, 6625.0], [279.0, 6633.0], [278.0, 6631.5], [276.0, 6462.0], [302.0, 6181.0], [300.0, 6364.0], [299.0, 6386.0], [298.0, 6387.0], [297.0, 6389.0], [296.0, 6390.0], [295.0, 6399.0], [294.0, 6511.0], [291.0, 6517.0], [290.0, 6516.5], [288.0, 6518.5], [307.0, 6335.0], [317.0, 6928.0], [319.0, 6492.5], [316.0, 6516.0], [315.0, 6101.0], [314.0, 6234.0], [310.0, 6545.5], [308.0, 6334.0], [306.0, 6562.0], [305.0, 6157.0], [304.0, 6474.0], [334.0, 6357.0], [335.0, 6786.0], [332.0, 6243.0], [323.0, 6503.0], [322.0, 6153.666666666667], [330.0, 5934.0], [329.0, 6152.0], [328.0, 6153.0], [327.0, 6158.0], [326.0, 6164.0], [325.0, 6157.0], [324.0, 6090.0], [351.0, 5735.5], [349.0, 5737.5], [347.0, 5865.0], [345.0, 6000.0], [344.0, 5886.0], [343.0, 5966.666666666667], [340.0, 5887.5], [338.0, 6284.0], [336.0, 6126.0], [367.0, 5659.0], [366.0, 5662.0], [365.0, 5664.0], [364.0, 5817.5], [362.0, 5883.25], [358.0, 5818.0], [356.0, 5824.0], [354.0, 5816.666666666667], [382.0, 5862.0], [383.0, 5620.0], [381.0, 5627.0], [380.0, 5865.0], [379.0, 5745.0], [378.0, 5869.0], [376.0, 5614.5], [374.0, 5896.0], [371.0, 6107.0], [370.0, 5658.0], [369.0, 5659.0], [368.0, 6115.0], [373.0, 5777.0], [387.0, 5510.0], [398.0, 5704.0], [399.0, 5468.0], [397.0, 5650.75], [386.0, 5510.0], [385.0, 5765.0], [384.0, 5622.0], [393.0, 5492.0], [392.0, 5708.0], [391.0, 5715.0], [390.0, 5933.0], [389.0, 6201.0], [388.0, 5503.0], [403.0, 5564.0], [414.0, 5718.5], [412.0, 5616.0], [410.0, 5623.5], [408.0, 5844.0], [407.0, 5424.0], [406.0, 5635.0], [405.0, 5745.0], [401.0, 5663.0], [400.0, 5674.0], [430.0, 5833.5], [431.0, 5639.0], [428.0, 5461.0], [425.0, 5669.0], [424.0, 5481.0], [423.0, 5266.0], [421.0, 5487.0], [420.0, 5494.0], [418.0, 5504.0], [416.0, 5601.5], [446.0, 5405.0], [444.0, 5419.0], [443.0, 5309.5], [441.0, 5425.0], [440.0, 5425.5], [438.0, 5855.0], [437.0, 5923.0], [436.0, 5847.0], [435.0, 5437.0], [434.0, 5445.333333333333], [462.0, 5525.0], [463.0, 5336.0], [461.0, 5529.0], [460.0, 5348.5], [458.0, 5365.0], [457.0, 5364.0], [456.0, 5371.0], [455.0, 5376.0], [448.0, 5187.0], [451.0, 5381.0], [450.0, 5394.0], [454.0, 5378.0], [453.0, 5572.0], [452.0, 5160.0], [478.0, 5459.0], [479.0, 5715.0], [477.0, 5270.0], [476.0, 5769.0], [475.0, 5744.0], [474.0, 5284.0], [473.0, 5478.0], [472.0, 5689.0], [471.0, 5483.0], [465.0, 5327.0], [464.0, 5330.0], [467.0, 5097.0], [466.0, 5323.0], [470.0, 5314.0], [469.0, 5313.0], [468.0, 5316.0], [495.0, 4986.5], [493.0, 4986.5], [482.0, 5252.0], [481.0, 5263.0], [480.0, 5454.0], [491.0, 5400.0], [490.0, 5401.0], [489.0, 5223.0], [488.0, 5223.0], [487.0, 5224.0], [486.0, 5423.0], [485.0, 5304.666666666667], [499.0, 5178.0], [510.0, 5209.0], [511.0, 5501.0], [508.0, 4892.0], [507.0, 5027.0], [505.0, 4938.333333333333], [502.0, 5354.0], [501.0, 4949.0], [500.0, 4947.0], [498.0, 4949.0], [497.0, 5636.0], [496.0, 5186.0], [537.0, 5023.0], [542.0, 4721.0], [543.0, 4907.0], [528.0, 4866.0], [530.0, 5037.0], [529.0, 5233.0], [533.0, 4734.5], [531.0, 4645.0], [541.0, 4623.0], [539.0, 4525.0], [538.0, 4626.0], [536.0, 4831.0], [519.0, 4811.0], [518.0, 5022.0], [517.0, 5284.333333333333], [514.0, 5114.0], [513.0, 4889.0], [512.0, 4894.0], [527.0, 4865.0], [525.0, 4662.0], [524.0, 5213.0], [523.0, 4890.0], [522.0, 4893.0], [520.0, 4803.0], [535.0, 5012.0], [534.0, 4630.0], [574.0, 4788.0], [564.0, 4390.0], [575.0, 4301.0], [561.0, 4419.0], [560.0, 4435.5], [563.0, 4606.0], [562.0, 4605.0], [573.0, 4884.0], [572.0, 4804.5], [569.0, 4738.0], [551.0, 4476.0], [550.0, 5085.0], [549.0, 4795.5], [547.0, 4694.0], [546.0, 4882.0], [545.0, 4701.0], [558.0, 4438.0], [557.0, 4650.666666666667], [554.0, 4657.0], [553.0, 4671.0], [552.0, 5062.0], [567.0, 4743.0], [566.0, 4562.0], [565.0, 4747.0], [604.0, 4075.0], [607.0, 4066.0], [592.0, 4445.0], [594.0, 4446.0], [593.0, 4451.0], [596.0, 4104.0], [595.0, 4506.0], [606.0, 4275.0], [605.0, 4278.0], [603.0, 4082.0], [602.0, 4085.0], [601.0, 4101.0], [600.0, 4614.0], [591.0, 4453.0], [577.0, 4301.0], [576.0, 4513.0], [579.0, 4693.0], [578.0, 4510.0], [581.0, 4294.0], [580.0, 4297.0], [583.0, 4291.0], [582.0, 4291.0], [590.0, 4448.0], [589.0, 4448.0], [588.0, 4450.0], [587.0, 4460.666666666667], [584.0, 4480.0], [599.0, 4106.0], [598.0, 4308.0], [635.0, 4099.0], [639.0, 4386.5], [634.0, 4100.0], [633.0, 4367.0], [631.0, 4108.0], [626.0, 3936.0], [625.0, 4484.0], [624.0, 4221.666666666667], [621.0, 4006.0], [612.0, 4036.0], [611.0, 4262.0], [615.0, 4129.0], [613.0, 4469.0], [620.0, 4009.0], [619.0, 4286.5], [617.0, 4127.5], [669.0, 3742.0], [671.0, 3924.0], [657.0, 3983.5], [659.0, 3965.0], [658.0, 3967.0], [661.0, 3770.0], [660.0, 3769.0], [668.0, 3939.0], [667.0, 3940.0], [666.0, 3757.0], [665.0, 3759.0], [664.0, 3756.0], [644.0, 4056.0], [643.0, 4245.0], [642.0, 3982.0], [640.0, 4085.0], [655.0, 3985.0], [654.0, 3985.0], [653.0, 4086.8888888888882], [663.0, 3955.0], [662.0, 3953.0], [696.0, 3506.0], [702.0, 3929.0], [703.0, 3787.0], [688.0, 3668.0], [691.0, 3973.0], [689.0, 3647.0], [701.0, 3686.0], [700.0, 3733.0], [698.0, 3507.0], [687.0, 4157.0], [673.0, 3733.0], [672.0, 3732.0], [677.0, 3900.0], [676.0, 3774.3333333333335], [679.0, 3894.0], [678.0, 3897.0], [686.0, 3664.5], [684.0, 4164.0], [683.0, 3693.0], [682.0, 3697.0], [681.0, 3788.5], [695.0, 3836.0], [694.0, 3892.0], [693.0, 3642.0], [692.0, 3645.0], [728.0, 3371.0], [732.0, 3318.0], [735.0, 3110.0], [721.0, 3488.0], [720.0, 3586.0], [724.0, 3469.0], [722.0, 3287.0], [734.0, 3387.0], [733.0, 3114.0], [731.0, 3494.0], [730.0, 3129.0], [729.0, 3272.0], [719.0, 3323.0], [704.0, 3487.0], [706.0, 3855.0], [705.0, 3482.0], [708.0, 3628.0], [707.0, 3441.0], [711.0, 3606.0], [709.0, 3769.0], [718.0, 3331.0], [716.0, 3338.0], [715.0, 3440.0], [714.0, 3440.0], [713.0, 3764.0], [712.0, 3624.0], [726.0, 3281.0], [725.0, 3466.0], [764.0, 3156.0], [756.0, 2884.0], [766.0, 2922.5], [753.0, 3122.6666666666665], [755.0, 2885.0], [754.0, 2883.0], [763.0, 2843.0], [761.0, 3258.0], [760.0, 3063.0], [743.0, 3149.0], [742.0, 3290.0], [741.0, 3161.0], [740.0, 2995.0], [739.0, 3373.0], [738.0, 3516.0], [737.0, 3292.0], [736.0, 3423.0], [750.0, 3289.0], [749.0, 3132.0], [748.0, 3378.0], [747.0, 2938.0], [746.0, 3153.0], [745.0, 3138.0], [744.0, 2961.0], [759.0, 3071.0], [758.0, 2879.0], [757.0, 3122.0], [794.0, 2844.0], [798.0, 2853.0], [799.0, 2774.0], [785.0, 2858.0], [784.0, 2654.0], [787.0, 2834.0], [786.0, 2834.0], [789.0, 2817.0], [788.0, 2821.0], [797.0, 2787.0], [796.0, 2873.0], [795.0, 2851.0], [793.0, 2870.5], [775.0, 2964.0], [774.0, 3065.0], [771.0, 3013.0], [770.0, 2828.0], [769.0, 2824.0], [768.0, 2828.0], [781.0, 2935.0], [780.0, 3016.0], [779.0, 2961.0], [778.0, 2961.0], [777.0, 3173.0], [776.0, 2992.0], [791.0, 2619.0], [790.0, 2986.0], [825.0, 2348.0], [830.0, 2617.5], [831.0, 2646.0], [816.0, 2498.0], [818.0, 2373.0], [817.0, 2376.0], [828.0, 2341.0], [827.0, 2342.0], [826.0, 2422.0], [815.0, 2751.0], [801.0, 2816.0], [800.0, 2938.0], [804.0, 2715.5], [802.0, 2956.0], [807.0, 2748.0], [806.0, 2661.5], [814.0, 2510.0], [813.0, 2511.0], [811.0, 2815.0], [810.0, 2520.0], [809.0, 2853.0], [808.0, 2752.0], [822.0, 2346.0], [821.0, 2350.0], [820.0, 2569.0], [819.0, 2659.0], [860.0, 2336.0], [851.0, 2378.0], [863.0, 2352.3333333333335], [848.0, 2526.0], [859.0, 2418.0], [858.0, 2266.6666666666665], [847.0, 2455.0], [836.0, 2524.0], [834.0, 2482.0], [839.0, 2277.0], [838.0, 2539.5], [846.0, 2512.0], [845.0, 2525.0], [843.0, 2252.0], [842.0, 2413.0], [841.0, 2476.0], [840.0, 2548.0], [855.0, 2191.5], [853.0, 2361.0], [852.0, 2352.0], [850.0, 2503.0], [849.0, 2424.0], [888.0, 2028.75], [893.0, 2120.0], [895.0, 2197.0], [892.0, 2248.5], [890.0, 2127.0], [889.0, 2026.0], [879.0, 2053.0], [864.0, 2439.0], [866.0, 2255.0], [865.0, 2453.0], [868.0, 2126.0], [867.0, 2300.0], [870.0, 2267.0], [869.0, 2280.0], [878.0, 2064.0], [877.0, 2075.3333333333335], [874.0, 2376.0], [873.0, 2261.5], [872.0, 2268.0], [885.0, 2028.0], [883.0, 2048.0], [882.0, 2167.5], [880.0, 2065.0], [922.0, 1900.0], [926.0, 1805.0], [927.0, 1799.0], [913.0, 1987.0], [912.0, 2095.0], [915.0, 2019.0], [914.0, 2078.0], [917.0, 2016.0], [916.0, 2044.0], [925.0, 1898.0], [924.0, 1970.0], [923.0, 2002.0], [921.0, 1849.5], [903.0, 1940.0], [902.0, 2204.0], [901.0, 2220.0], [900.0, 2212.0], [899.0, 2009.0], [911.0, 1893.0], [910.0, 2000.0], [909.0, 1938.0], [908.0, 2036.0], [907.0, 1935.0], [906.0, 1942.0], [905.0, 1942.0], [904.0, 2128.0], [919.0, 1846.0], [918.0, 1974.0], [953.0, 1748.0], [957.0, 1758.0], [959.0, 1679.0], [946.0, 1736.5], [944.0, 1923.0], [949.0, 1770.0], [948.0, 1717.5], [956.0, 1878.0], [955.0, 1835.0], [954.0, 1678.0], [952.0, 1675.0], [935.0, 1761.0], [934.0, 1932.0], [933.0, 1833.0], [932.0, 1906.0], [931.0, 1787.0], [930.0, 2049.0], [929.0, 1796.0], [928.0, 1801.0], [943.0, 1722.0], [942.0, 1890.0], [941.0, 1737.0], [940.0, 1728.0], [939.0, 1833.5], [937.0, 1752.0], [936.0, 1835.0], [951.0, 1675.0], [950.0, 1684.0], [985.0, 1343.0], [989.0, 1341.0], [991.0, 1373.5], [976.0, 1516.0], [978.0, 1581.0], [977.0, 1513.0], [988.0, 1321.0], [987.0, 1326.0], [986.0, 1336.0], [984.0, 1342.0], [967.0, 1545.0], [966.0, 1688.0], [965.0, 1570.0], [964.0, 1611.5], [963.0, 1807.0], [962.0, 1601.0], [960.0, 1609.0], [975.0, 1504.0], [973.0, 1626.0], [972.0, 1509.0], [971.0, 1657.0], [970.0, 1516.0], [969.0, 1550.0], [968.0, 1681.0], [983.0, 1351.0], [982.0, 1363.5], [980.0, 1364.0], [979.0, 1509.0], [1000.0, 1328.0], [998.0, 1346.0], [997.0, 1398.5], [995.0, 1303.0], [993.0, 1420.0], [992.0, 1424.0]], "isOverall": false, "label": "doBizA HTTP请求", "isController": false}, {"data": [[500.870000000001, 4913.5490000000045]], "isOverall": false, "label": "doBizA HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2916.6666666666665, "minX": 1.74289758E12, "maxY": 3833.3333333333335, "series": [{"data": [[1.74289758E12, 3833.3333333333335]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74289758E12, 2916.6666666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74289758E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4913.5490000000045, "minX": 1.74289758E12, "maxY": 4913.5490000000045, "series": [{"data": [[1.74289758E12, 4913.5490000000045]], "isOverall": false, "label": "doBizA HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74289758E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4913.461999999992, "minX": 1.74289758E12, "maxY": 4913.461999999992, "series": [{"data": [[1.74289758E12, 4913.461999999992]], "isOverall": false, "label": "doBizA HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74289758E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.0870000000000006, "minX": 1.74289758E12, "maxY": 1.0870000000000006, "series": [{"data": [[1.74289758E12, 1.0870000000000006]], "isOverall": false, "label": "doBizA HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74289758E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1249.0, "minX": 1.74289758E12, "maxY": 8830.0, "series": [{"data": [[1.74289758E12, 8830.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74289758E12, 7595.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74289758E12, 8016.99]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74289758E12, 7687.95]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.74289758E12, 1249.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74289758E12, 5128.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74289758E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1504.0, "minX": 16.0, "maxY": 7716.0, "series": [{"data": [[131.0, 4006.0], [16.0, 7716.0], [143.0, 2107.0], [136.0, 6157.0], [172.0, 7580.0], [44.0, 1504.0], [98.0, 2964.5], [124.0, 4937.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 172.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1503.5, "minX": 16.0, "maxY": 7716.0, "series": [{"data": [[131.0, 4006.0], [16.0, 7716.0], [143.0, 2107.0], [136.0, 6157.0], [172.0, 7580.0], [44.0, 1503.5], [98.0, 2964.5], [124.0, 4937.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 172.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.74289758E12, "maxY": 16.666666666666668, "series": [{"data": [[1.74289758E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74289758E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.74289758E12, "maxY": 16.666666666666668, "series": [{"data": [[1.74289758E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74289758E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.74289758E12, "maxY": 16.666666666666668, "series": [{"data": [[1.74289758E12, 16.666666666666668]], "isOverall": false, "label": "doBizA HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74289758E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.74289758E12, "maxY": 16.666666666666668, "series": [{"data": [[1.74289758E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74289758E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

